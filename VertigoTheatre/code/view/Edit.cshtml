@model TheatreCMS3.Areas.Prod.Models.CastMember

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("Edit", "CastMembers", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="CastMember-Create--Container">
        <div class="CastMember-Create--FormBody">
            <h1 class="CastMember-Create--Header">Edit Cast Member</h1>
            <hr />
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.CastMemberId)

            @{
                string text = "";
                if (Model.Photo != null)
                {
                    text = Convert.ToBase64String(Model.Photo);
                }
            }
            <div class="CastMember-Edit--PhotoContainer">
                <img src="data:image/jpg;base64,@text" class="CastMember-Edit--Photo" />
            </div>

            <div>
                @Html.LabelFor(model => model.Photo, htmlAttributes: new { @class = "CastMember-Create--FieldLabel" })
                <div class="CastMember-Create--Center">
                    <input type="file" name="userImage" id="userImage" accept=".png,.jpg,.jpeg,.gif,.tif" class="CastMember-Create--FileInput" />
                </div>
            </div>

            <div>
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "CastMember-Create--FieldLabel" })
                <div class="CastMember-Create--Center">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { placeholder = "Enter member name", @class = "CastMember-Create--InputField" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div>
                @Html.LabelFor(model => model.Bio, htmlAttributes: new { @class = "CastMember-Create--FieldLabel" })
                <div class="CastMember-Create--Center">
                    @Html.EditorFor(model => model.Bio, new { htmlAttributes = new { placeholder = "Enter member bio", @class = "CastMember-Create--InputField" } })
                    @Html.ValidationMessageFor(model => model.Bio, "", new { @class = "text-danger" })
                </div>
            </div>

            <div>
                @Html.LabelFor(model => model.ProductionTitle, htmlAttributes: new { @class = "CastMember-Create--FieldLabel" })
                <div class="CastMember-Create--Center">
                    @Html.EnumDropDownListFor(model => model.ProductionTitle, htmlAttributes: new { @class = "CastMember-Create--InputField" })
                    @Html.ValidationMessageFor(model => model.ProductionTitle, "", new { @class = "text-danger" })
                </div>
            </div>

            <div>
                @Html.LabelFor(model => model.MainRole, htmlAttributes: new { @class = "CastMember-Create--FieldLabel" })
                <div class="CastMember-Create--Center">
                    @Html.EnumDropDownListFor(model => model.MainRole, htmlAttributes: new { @class = "CastMember-Create--InputField" })
                    @Html.ValidationMessageFor(model => model.MainRole, "", new { @class = "text-danger" })
                </div>
            </div>

            <div>
                @Html.LabelFor(model => model.Character, htmlAttributes: new { @class = "CastMember-Create--FieldLabel" })
                <div class="CastMember-Create--Center">
                    @Html.EditorFor(model => model.Character, new { htmlAttributes = new { placeholder = "Enter current character", @class = "CastMember-Create--InputField" } })
                    @Html.ValidationMessageFor(model => model.Character, "", new { @class = "text-danger" })
                </div>
            </div>

            <div>
                @Html.LabelFor(model => model.CurrentMember, htmlAttributes: new { @class = "CastMember-Create--FieldLabel" })
                <div class="CastMember-Create--Checkbox">
                    <div class="checkbox">
                        @Html.EditorFor(model => model.CurrentMember)
                        @Html.ValidationMessageFor(model => model.CurrentMember, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div>
                @Html.LabelFor(model => model.YearJoined, htmlAttributes: new { @class = "CastMember-Create--FieldLabel" })
                <div class="CastMember-Create--Center">
                    @Html.EditorFor(model => model.YearJoined, new { htmlAttributes = new { placeholder = "Enter the year joined", @class = "CastMember-Create--InputField" } })
                    @Html.ValidationMessageFor(model => model.YearJoined, "", new { @class = "text-danger" })
                </div>
            </div>

            <div>
                @Html.LabelFor(model => model.DebutYear, htmlAttributes: new { @class = "CastMember-Create--FieldLabel" })
                <div class="CastMember-Create--Center">
                    @Html.EditorFor(model => model.DebutYear, new { htmlAttributes = new { placeholder = "Enter debut year", @class = "CastMember-Create--InputField" } })
                    @Html.ValidationMessageFor(model => model.DebutYear, "", new { @class = "text-danger" })
                </div>
            </div>
            <div>
                @Html.LabelFor(model => model.CastYearLeft, htmlAttributes: new { @class = "CastMember-Create--FieldLabel" })
                <div class="CastMember-Create--Center">
                    @Html.EditorFor(model => model.CastYearLeft, new { htmlAttributes = new { placeholder = "Enter the year left", @class = "CastMember-Create--InputField" } })
                    @Html.ValidationMessageFor(model => model.CastYearLeft, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="CastMember-Create--CreateButtonDiv">
                <input type="submit" value="Save" class="CastMember-Create--CreateButton" />
            </div>
            <div class="CastMember-Create--BackButtonDiv">
                <button class="CastMember-Create--BackButton">@Html.ActionLink("Back to List", "Index", null, new { @class = "CastMember-Create--Link" })</button>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
